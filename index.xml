<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>idevz.org on 做一个善于思考的学习者</title>
    <link>https://idevz.org/</link>
    <description>Recent content in idevz.org on 做一个善于思考的学习者</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>© 2020 idevz.org</copyright>
    
	<atom:link href="https://idevz.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://idevz.org/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idevz.org/page/about/</guid>
      <description>开心网 &amp;ndash;&amp;gt; 凤凰网 &amp;ndash;&amp;gt; 新浪移动 &amp;ndash;&amp;gt; 微博
GitHub
Weibo</description>
    </item>
    
    <item>
      <title>Shell 函数返回值小记</title>
      <link>https://idevz.org/2019/10/shell-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Fri, 25 Oct 2019 15:34:57 +0800</pubDate>
      
      <guid>https://idevz.org/2019/10/shell-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%B0%8F%E8%AE%B0/</guid>
      <description>日常难免会有些 shell 脚本编写的事情，众所周知这事儿门槛很低，再不济把要执行的命令挨排垒进去也可以作为 一个自动化脚本，但有些复杂的功能或者考虑到代码的复用就需要分些模块、封装些函数了。如何更优雅的 处理函数的返回值便成为一个比较有意思的问题。
在 Shell 函数中优雅返回 shell 脚本没什么特别的技法可言，更多的只能是靠逐步积累。这次在编写 Lego 项目命令检查函数时， 需要获取一个返回值，我期待这个返回值不仅仅表达成功与否这个 2 元的结果。但我自己又习惯 在每个脚本前面都加上 set -e 选项，它的意义在于：如果命令失败（即返回一个非零的退出状态），那么脚本将退出。
通常避免非零值的返回导致整个程序退出的方法要么把调用过程放到 $() 中，要么就是将其与 &amp;amp;&amp;amp; 或 || 命令放到一起，而在这后面获取函数调用的返回值，这样就保证及时返回值为非 0，程序还是能按条件往下执行。下面对后者给出一个示例：
call_some_function &amp;#34;${args}&amp;#34; || ret=$? if [ &amp;#34;${ret}&amp;#34; = &amp;#39;false&amp;#39; ]; then echo &amp;#34;do something&amp;#34; fi 返回码小结 类 Unix 系统对返回码做了统一的规范，无论是 exit 还是 return 命令，都是统一的返回规则，这里对 这些标准的错误码（返回码）做一个简单的梳理，值得注意的是如果返回码超出规定的 0 ~ 255 这个范围，则会随机返回一个这期间的数字：
   Exit Code Number Meaning Example Comments     0 命令成功完成 exit 0 当命令正确完成、返回或者退出的时候，返回码为 0   1 通常的未知错误 / Catchall for general errors let &amp;ldquo;var1 = 1&amp;frasl;0&amp;rdquo; Miscellaneous errors, such as &amp;ldquo;divide by zero&amp;rdquo; and other impermissible operations   2 误用shell命令 / Misuse of shell builtins (according to Bash documentation) empty_function() {} Missing keyword or command, or permission problem (and diff return code on a failed   126 命令无法执行 / Command invoked cannot execute /dev/null Permission problem or command is not an executable   127 没有找到命令 / &amp;ldquo;command not found&amp;rdquo; illegal_command Possible problem with $PATH or a typo   128 无效的退出参数 / Invalid argument to exit exit 3.</description>
    </item>
    
    <item>
      <title>基于 Parallels 尝鲜 CentOS-8</title>
      <link>https://idevz.org/2019/10/%E5%9F%BA%E4%BA%8E-parallels-%E5%B0%9D%E9%B2%9C-centos-8/</link>
      <pubDate>Sat, 19 Oct 2019 11:03:16 +0800</pubDate>
      
      <guid>https://idevz.org/2019/10/%E5%9F%BA%E4%BA%8E-parallels-%E5%B0%9D%E9%B2%9C-centos-8/</guid>
      <description>之前为了应对在跨语言开发过程中，需要折腾各种开发环境，我做了一个工具包 runX 来自动化环境部署的过程， 当全新的 CentOS-8 可用后，我就一直想折腾一把，毕竟 7 的内核版本实在太低了。因为最近又对环境部署和自动化工具有些新的想法， 干脆一气呵成，直接在工具集中把这些想法实现出来，但是考虑到变化比较大，而且 runX 本身其实已经是稳定状态， 所以索性搞一个 runX 的全新升级版 Lego。
Lego，旨在想搭积木一样来组合各种部署功能，因为在 runX 这几年的使用过程中，发现经常还是会有些复用的功能， 在 k8s-start 项目中我试验了这种积木的思想，发现很受用。重新整理 runX 到 Lego，主要包含以下几个方面：
 最核心的当然是积木的思想，所有的方法和模块都是可组合的。 新装虚拟机当前可能无法做到完全自动化，但是可以通过组合的方式实现半自动化。  下面是装机初始的一些步骤，相关的代码会逐步整理到 Lego 这个项目中。
Base 装机步骤  修改运行级别，CentOS 7 通过修改 /etc/inittab 已经过时，CentOS 8 使用 Target，见下 通网，往后的各种操作都需要联网进行（设置免密登陆，后续操作都可以通过 ssh 完成） 更换阿里云的 yum 源，阿里云已经建了 CentOS 8 的 yum 源，因为安装 Parallels Tools 依赖的包需要 安装 Parallels Tools(否则无法共享目录，以及使用命令行 prlctl 命令控制 pvm) 关机，设置共享文件夹等通用设置（关机后，在 Parallels 图形界面进行设置较为方便，目前尚未研究通过 prlctl 命令来设置） 安装 Parallels Tools 后，就可以将 Mac 宿主机中的 runX 项目挂载到 pvm 中，运行相关自动化脚本，比如一些基础设置（/etc/profile，/etc/sudoers 等）  修改运行级别，关闭图形界面 systemctl set-default multi-user.</description>
    </item>
    
    <item>
      <title>Service mesh — 一种新的模式而不是新技术</title>
      <link>https://idevz.org/2018/11/service-mesh-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%A8%A1%E5%BC%8F%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B0%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Tue, 13 Nov 2018 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.org/2018/11/service-mesh-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%A8%A1%E5%BC%8F%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B0%E6%8A%80%E6%9C%AF/</guid>
      <description>原著信息： Service Mesh – A New Pattern, Not A New Technology?
by:Marco Palladino
What is Service Mesh and Where Did it Come From? Over the past few months, you may have noticed the explosion of industry chatter and articles surrounding service mesh and the future of software architecture. These discussions have been highly polarizing, with tribes forming around specific vendors. While this partisan trend is to be expected, the common thread among these discussions is the rapid transformation of how APIs are used in the enterprise, and what this means for the topology of our traffic.</description>
    </item>
    
    <item>
      <title>微服务架构的 What，Why，和 How</title>
      <link>https://idevz.org/2018/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84-whatwhy%E5%92%8C-how/</link>
      <pubDate>Tue, 18 Sep 2018 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.org/2018/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84-whatwhy%E5%92%8C-how/</guid>
      <description>原著信息： The What, Why, and How of a Microservices Architecture
by:Jetinder Singh
For many years now we have been building systems and getting better at it. Several technologies, architectural patterns, and best practices have emerged over those years. Microservices is one of those architectural patterns which has emerged from the world of domain-driven design, continuous delivery, platform and infrastructure automation, scalable systems, polyglot programming and persistence.
多年来我们构建系统并且做到越来越好。这些年出现了一些技术、架构模式和最佳实践。微服务是从领域驱动设计，持续交付，平台和基础设施自动化，可扩展系统，多语言编程和持久性领域的架构模式之一。
What is a Microservices Architecture in a Nutshell?</description>
    </item>
    
    <item>
      <title>本地 k8s 集群搭建</title>
      <link>https://idevz.org/2017/12/%E6%9C%AC%E5%9C%B0-k8s-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 13 Dec 2017 12:13:21 +0800</pubDate>
      
      <guid>https://idevz.org/2017/12/%E6%9C%AC%E5%9C%B0-k8s-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid>
      <description>Kubernetes 现在已经成为容器编排的事实标准，是明确的容器云的未来，社区高涨的热情，ServiceMesh、Knative、CNCF 等等无数关键字无一不是在反复突出他的关键地位。 如果架构、服务化的未来是容器云，那么 Kubernetes 必然是最核心的基础。 如果只是希望学习 Kubernetes 的使用，比如基于 Kubernetes 运行一些测试，那最简单的方式就是使用 minikube， 只需要保证有一个可用的 HTTP_PROXY 可用保证其依赖的容器运行时（比如 Docker）可以正常下载 Google 相应的镜像文件，一条命令即可拥有一个单机版 Kubernetes 环境。
minikube start \  --docker-env HTTP_PROXY=${http_proxy} \  --docker-env HTTPS_PROXY=${https_proxy} \  --docker-env NO_PROXY=192.168.99.0/24 在有代理的情况下，先把需要的镜像下载完成，然后在去除环境变量中的代理，来部署 k8s 服务。
但是，如果想更进一步的深入了解 Kubernetes 的更多细节，则需要手动部署，甚至是从源码编译来部署 Kubernetes，我应邀在极客时间做了一个小视频， 并配套了一个部署项目 k8s-start，来说明这个问题，感兴趣的同学可以先看看这个项目。下面是一些学习和使用中遇到的一些值得关注的问题。
product_uuid 与 MAC 地址唯一性 我习惯使用 parallels 在本机虚拟出 Linux 来作为部署的服务器，而且为了更快速的按需生成虚拟机，我还有一个好用的项目来驱动，但是快速 clone 虚拟机会带来直接的问题就是 product_uuid 的唯一性得不到保障（sudo cat /sys/class/dmi/id/product_uuid），虽然 MAC 地址这些可以重新生成，但是 product_uuid 却不可以（这个数据是内核数据的一个映射，从内存中读出来的），所以最后只能独立安装与集群节点数一致的虚拟机。
安装文档 真是一个字不能漏。
kube-dashboard 服务导出 这里我使用 ingress（ 选用 Nginx-ingress-controller 实现） 的方式来导出服务，当然还有 其他方式 同样可以导出 k8s 集群中的服务。</description>
    </item>
    
    <item>
      <title>使用Vs Code 调试 Golang 程序</title>
      <link>https://idevz.org/2017/12/%E4%BD%BF%E7%94%A8vs-code-%E8%B0%83%E8%AF%95-golang-%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Mon, 11 Dec 2017 20:18:44 +0800</pubDate>
      
      <guid>https://idevz.org/2017/12/%E4%BD%BF%E7%94%A8vs-code-%E8%B0%83%E8%AF%95-golang-%E7%A8%8B%E5%BA%8F/</guid>
      <description>安装 dlv 因为我使用虚拟机开发，Mac 宿主机与 CentOS 虚拟机的 GOPATH 都指向了同一个路径，所以我的 Golang bin 路径是重合的 所以我需要在两个机器上都有一份各自的 dlv，好在 Mac 有 brew，所以 Mac brew 安装的 dlv 就可以避免抢占 GOPATH 路径了。下面记录几个安装中的小问题。
Mac 安装 dlv brew install 未必会好使，因为 brew 安装是非 root 安装，而 dlv 需要添加系统认证证书，可能会遇到如下安装不成功的报错。
==&amp;gt; Installing delve from go-delve/delve ==&amp;gt; Downloading https://github.com/derekparker/delve/archive/v1.0.0-rc.2.tar.gz Already downloaded: /Users/idevz/Library/Caches/Homebrew/delve-1.0.0-rc.2.tar.gz security: SecKeychainSearchCopyNext: The specified item could not be found in the keychain. ==&amp;gt; Generating dlv-cert ==&amp;gt; openssl req -new -newkey rsa:2048 -x509 -days 3650 -nodes -config dlv-cert.</description>
    </item>
    
    <item>
      <title>Rust 开发环境</title>
      <link>https://idevz.org/2017/12/rust-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 11 Dec 2017 11:33:38 +0800</pubDate>
      
      <guid>https://idevz.org/2017/12/rust-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>这里记录下 Rust 开发环境的搭建过程，主要是 Rustup 和 Cargo 的安装。
Rustup 是 Rust 安装器和版本管理工具，而 Cargo 是 Rust 的构建工具和包管理器。
Rust 有各种平台支持，和快速版本迭代机制，因而不同时期存在大量不同的 Rust 构建版本。 Rustup 用于管理不同平台下的 Rust 构建版本并使其互相兼容， 支持安装由 Beta 和 Nightly 频道发布的版本， 并支持其他用于交叉编译的编译版本。
curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh 这条命令将下载并安装 Rust 的官方编译器以及他的包管理工具 Cargo。 cargo、rustc、rustup 和其它命令将会被添加到 Cargo 位于 $HOME/.cargo/bin 的 bin 目录下。 这个路径可以通过 CARGO_HOME 环境变量来修改。
Rustup 元数据和工具链将被安装到 Rustup 位于 $HOME/.rustup 的家目录下。该路径可以通过 RUNSTUP_HOME 环境变量来修改。
可以通过运行 rustup update 来升级 Rust。也可以通过运行 rustup self uninstall 命令来卸载 Rust 及其各种组件、 工具链，之前所有的更改都将被恢复。以下是安装结果：</description>
    </item>
    
    <item>
      <title>跟踪及时编译 / Tracing JIT</title>
      <link>https://idevz.org/2017/12/%E8%B7%9F%E8%B8%AA%E5%8F%8A%E6%97%B6%E7%BC%96%E8%AF%91-/-tracing-jit/</link>
      <pubDate>Mon, 04 Dec 2017 15:40:34 +0800</pubDate>
      
      <guid>https://idevz.org/2017/12/%E8%B7%9F%E8%B8%AA%E5%8F%8A%E6%97%B6%E7%BC%96%E8%AF%91-/-tracing-jit/</guid>
      <description>跟踪及时编译（Tracing JIT Compilation） 是一种虚拟机在程序运行时用来优化程序执行性能的技术，实现方式是通过对频繁执行操作的线性序列的统计并将其编译为本地机器码，并且执行他们。 这与传统基于每个方法进行编译优化的 JIT 编译有着本质的不同。
JIT 概览 及时编译（Just-in-time compilation） 是一种在运行时将部分程序编译为机器码来提升程序执行速度的技术。一种对不同 JIT 编译技术分类的方法是通过他们编译的范围。 基于方法的 JIT 编译器每次将一个方法编译成机器码，而 Tracing JIT 编译器将经常执行的循环序列作为它们编译的单元。 Tracing JIT 编译器基于这样的一个假设，即，程序在某些比较热的循环（“hot loops”）花费执行的大部分时间，并且后续的循环迭代往往执行相同的代码路径。拥有 Tracing JIT 编译器的虚拟机通常除了一个 Tracing JIT 编译器他们还有要么一个解释器，或者一个基于方法的编译器这样混合模式的执行环境。
Tracing JIT 编译器的技术细 Tracing JIT 编译器 在运行时经过多个阶段。 首先，收集循环的 profiling 信息。在一个热循环被确认后，将进入一个记录着该循环所有执行操作的特殊的跟踪模式（tracing mode），将所有操作序列记为一条 trace。随后这条 trace 将被优化并编译成机器码（trace）。 当这个循环再一次被执行的时候，被调用的将会是编译过的 trace 而不是相关的程序。
  相关各执行阶段解释如下:
 
--- title: idevz.org menu: main weight: -270 --- ### 关键字：  #### &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[技术](/tech)  &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[OpenResty](/categories/openresty) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Service - Mesh](/categories/servicemesh) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[微服务](/categories/微服务/) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[PHP](/categories/php) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Golang](/categories/golang) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Vanilla](/categories/vanilla) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[How-To](/categories/how-to) #### &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[工具](/tools)  #### &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Life](/life) -- 分析（Profiling）阶段 Profiling 的目的在于识别出热循环（hot loops）。通常是通过统计每个循环的迭代次数来实现的，在一个循环执行的次数超过某些阈值，这个循环将被认为是热的，随机将进入 Tracing 模式。</description>
    </item>
    
    <item>
      <title>微服务的服务网格</title>
      <link>https://idevz.org/2017/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</link>
      <pubDate>Mon, 18 Sep 2017 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.org/2017/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</guid>
      <description>原著信息： Service Mesh for Microservices
by:Kasun Indrasiri
Microservices architecture has been evolving a lot during the last couple of years and there are quite a few new concepts and patterns are emerging. ‘Service Mesh’ concept is getting quite popular. In this post, I’m planning to cover the key concepts related to Service Mesh and how it is used in real-world microservices implementations.
微服务架构在过去几年中发展很多，出现了相当多的新的概念和模式。“Service Mesh” 的概念越来越受欢迎。本文，我计划涵盖 Service Mesh 的关键概念以及如何在实际的微服务实现中使用。
Why ‘Service Mesh’?</description>
    </item>
    
    <item>
      <title>微服务分层架构</title>
      <link>https://idevz.org/2017/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sat, 16 Sep 2017 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.org/2017/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84/</guid>
      <description>原著信息： Microservices Layered Architecture
by:Kasun Indrasiri
With Microservices architecture, a single software application/functionality is implemented as a combination of multiple microservices and their interactions. Hence the communications between services and their coordination are vital for a successful realization of microservices architecture.
在微服务架构中，单个软件应用 / 功能被实现为多个微服务及其交互的组合。因此服务间的通信及他们的协调对于成功实现微服务架构至关重要。
It is important to understand that, the tasks that an ESB does in an ESB based SOA implementation, don’t simply disappear when you switch to Microservices Architecture.</description>
    </item>
    
    <item>
      <title>CentOS 如何打 RPM 包</title>
      <link>https://idevz.org/2017/07/centos-%E5%A6%82%E4%BD%95%E6%89%93-rpm-%E5%8C%85/</link>
      <pubDate>Thu, 27 Jul 2017 19:55:52 +0800</pubDate>
      
      <guid>https://idevz.org/2017/07/centos-%E5%A6%82%E4%BD%95%E6%89%93-rpm-%E5%8C%85/</guid>
      <description>打包前的准备 安装相关打包工具  sudo yum install rpmdevtools rpmlint rpmbuild --version
❯ rpmbuild --version z@z RPM 版本 4.11.3  新建用户 RPM 在打包的过程中会将文件临时安装到系统中，为了保证构建程序不破坏系统环境，要使用普通用户打包：
sudo useradd rpmuser sudo passwd rpmuser su - rpmuser 初始化打包环境 rpmdev-setuptree是rpmdevtools中带的初始化环境脚本，执行后会在用户主目录下创建rpmbuild目录和.rpmmacros文件，同时生成所需的子目录和默认的控制参数，执行：
rpmdev-setuptree 生成的目录结构:
`-- rpmbuild |-- BUILD |-- RPMS |-- SOURCES |-- SPECS `-- SRPMS 默认的全局控制宏文件.rpmmacros内容：
%_topdir %(echo $HOME)/rpmbuild %_smp_mflags %( \  [ -z &amp;#34;$RPM_BUILD_NCPUS&amp;#34; ] \\\  &amp;amp;&amp;amp; RPM_BUILD_NCPUS=&amp;#34;`/usr/bin/nproc 2&amp;gt;/dev/null || \\\ /usr/bin/getconf _NPROCESSORS_ONLN`&amp;#34;; \\\  if [ &amp;#34;$RPM_BUILD_NCPUS&amp;#34; -gt 16 ]; then \\\  echo &amp;#34;-j16&amp;#34;; \\\  elif [ &amp;#34;$RPM_BUILD_NCPUS&amp;#34; -gt 3 ]; then \\\  echo &amp;#34;-j$RPM_BUILD_NCPUS&amp;#34;; \\\  else \\\  echo &amp;#34;-j3&amp;#34;; \\\  fi ) %__arch_install_post \  [ &amp;#34;%{buildarch}&amp;#34; = &amp;#34;noarch&amp;#34; ] || QA_CHECK_RPATHS=1 ; \  case &amp;#34;${QA_CHECK_RPATHS:-}&amp;#34; in [1yY]*) /usr/lib/rpm/check-rpaths ;; esac \  /usr/lib/rpm/check-buildroot 安装编译软件 制作rpm包要先编译在打二进制包，所以要装 gcc、make 等工具，如果是给 Golang 的项目打 RPM 包，还需要有 go 环境</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idevz.org/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idevz.org/1/01/</guid>
      <description>源文件： 问题背景（要求100字以内，不然产品页面显示不全讲师介绍的信息）：
Kubernetes 作为当前事实的云操作系统，其核心基础地位不言而喻，用好它绝对称得上一项基本技能，就好比工程师不会用电脑就无法干活一样。如何做到呢？我认为从源码编译搭建一个自己的 Kubernetes 环境绝对是一个探究 Kubernetes 体系的好方法，就让我们以此开始 Kubernetes 之旅吧。
1.二三百字加一张图片（PS：保证清晰度）
2.讲师介绍
3.代码演示（建议前期录屏）
4.图片与内容匹配（可提供 PPT）
5.图片 代码 与说的话一一对应
【老师调整文稿之前，请看一遍红色字体的内容，便于前期对齐思路，后续高效协作】
1.《每日一课文字稿模版》可供参考（建议写之前，老师看一遍）：https://shimo.im/docs/cd6hrWrKk9jDWxgV/ 2.一定按照以下内容要求来写，参考上面的模版再看一看，期间有任何相关问题，我们及时沟通哈：
（1）提出问题。 （2）讲述解决问题的核心关键点。 （3）讲怎么解决问题。 （4）延伸或者总结。
《如何从源码编译部署入门 Kubernetes？》 《如何更轻松简单地从源码编译部署Kubernetes？》
1.提出问题
 庞杂，不知道如何下手 资源封闭，跟着安装文档不一定能成功部署 有些关键设置细节安装文档并没有说明为什么要如此操作，做完同样一头雾水不知所云  2.讲述解决问题的核心关键点
 摸清楚主干，抓住重点，只关注必须的模块 编译安装，避免资源封锁（从本质来看待部署这个问题，就是一些进程的正确启动） 对一些关键的注意事项进行必要说明，比如 PKI 如何创建，静态 Pod 如何使用]  1.提出问题
你好，我是周晶。随着容器、虚拟化技术对整个 IT 业界的工程化、标准化和组织效能提升带来革命性、颠覆性的升级，Kubernetes 也日渐稳固了其作为云计算领域的史诗级项目的核心基础地位，同时具备 PAAS 平台的简单性以及 IAAS 平台的灵活性的 Kubernetes 让工业级的容器化、容器云化实践变得更高效、可信赖。
之所以说 Kubernetes 是一个史诗级的项目，因为它实在是太庞杂了，众多的自有概念和模块、如此大量的代码和文档，新手入门很可能看着那么大的蛋糕不知如何下口。我刚开始接触 Kubernetes 的时候就是这个感觉，我的习惯是拿到一个新东西，首先自己 run 起来，直观感受一下，会简单使用后再考虑是否需要进一步深入了解。
但是，Kubernetes 从部署到运行，再到能使用，真可谓是一步一个坎儿。很容易从入门就放弃了。
就拿部署来说，虽然官方提供了 MiniKube、Kind（Kubernetes IN Docker）、Kubeadmin 等方案，但跟着文档操作起来，也会遇到各种问题，感觉整个过程像是盲人摸象，只见树木不见森林，就算最终历尽艰辛部署好了，也不清楚为什么要这么做，这条命令敲下去，到底背后发生了些什么？有哪些影响和效果？为什么要禁用 Swap？为什么要使用 SELINUX 的 permissive 模式或者直接禁用 SELINUX？</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idevz.org/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idevz.org/1/01/</guid>
      <description>http://10.211.55.110:10252/debug/pprof/ 每个组件都快可以 pprof
源文件：
【老师调整文稿之前，请看一遍红色字体的内容，便于前期对齐思路，后续高效协作】 1.《每日一课文字稿模版》可供参考（建议写之前，老师看一遍）： https://shimo.im/docs/Dd6YGpJC3jcQYX9K/ 《文稿1 | 前端 Router 是怎么实现的？ 》
2.一定按照以下内容要求来写 参考上面的模版再看一看，期间有任何相关问题，我们及时沟通哈：
（1）提出问题。 （2）讲述解决问题的核心关键点。 （3）讲怎么解决问题。 （4）延伸或者总结。
（3）讲怎么解决问题。
题目：如何从 CRD 扩展开发切入 K8S 源码学习？
1.提出问题 Kubernetes 的核心组件 Kube-ApiServer 与核心理念 声明式 API
你好，我是周晶。我们继续来探索如何更轻松的掌握 Kubernetes，还是老方法：从实践来找切入点。前面我们基于源码编译的方式轻松部署了 Kubernetes 集群，目的是为了抓住 Kubernetes 体系的主干，从整体上来概要认识 Kubernetes，在每日一课的《如何更轻松简单地从源码编译部署 Kubernetes？》中，有详细的讲解，你可以去看一下。那么，有了前面的基础知识储备，接下来我们就以 Kubernetes 扩展开发作为切入点，来继续后面的学习。
Kubernetes 对用户扩展有着极高的灵活性，我们可以通过各种方式按需进行扩展，比如， kubectl 插件、APIserver Aggregator（聚合器）插件、CRD 等方式。考虑到 Kubernetes 的很多核心组件都离不开它特有的声明式 API 与 Kubernetes 编程范式，所以我们这里就以用户自定义资源对象（CRD）扩展作为切入点来开启 Kubernetes 扩展开发和源码学习之旅。
2.解决问题的核心关键点
那问题就来了，如何基于 CRD 和自定义资源控制器 来扩展 Kubernetes？如何通过扩展 Kubernetes 的方式来更深入的掌握 Kubernetes 以及进行 Kubernetes 源码学习呢？我认为最核心的关键点在于弄清楚 CRD 和自定义资源控制器开发的要领，搞明白 Kubernetes 运作的核心思想。我们清楚所有的操作都需要通过与 Kube-apiserver 交互来完成，那搞懂这其中具体的交互机制同样是关键所在。下面我们就带着这些疑问，沿着理论联系实践的思路往下按图索骥的逐步展开吧。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idevz.org/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idevz.org/1/01/</guid>
      <description>helm.md</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idevz.org/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idevz.org/1/01/</guid>
      <description>Motan主要功能： 服务发现：服务发布、订阅、通知 高可用策略：失败重试、快速失败、异常隔离 负载均衡：低并发优先、一致性Hash、随机请求、轮询等 扩展性：支持SPI扩展 其他：调用统计、访问日志、流量控制等
服务治理型 特点：SOA解决方案，服务发现及治理 缺点：语言耦合度高，跨语言支持难度较大 典型代表：Dubbo、Dubbox、ICE、Motan
跨语言调用型： 特点：语言无关的协议、适合不同语言服务调用 缺点：没有服务发现机制，一般需要通过代理方式调用 典型代表：Thrift、GRPC、Hessian、Hprose、Finagle
Motan调用流程
Registry: 注册中心 Service：服务提供方 Client：服务使用方
Cluster 模块 Filter chains
服务分组策略 服务分组：group＝dc＋biz 解决的问题：就近访问；测试、仿真、生产隔离
流量控制与指令系统 command 1
单条指令示例 流量切换指令示例 { &amp;rdquo;index&amp;rdquo;: 1, &amp;rdquo;version&amp;rdquo;: &amp;ldquo;1.0&amp;rdquo;, &amp;rdquo;dc&amp;rdquo;: &amp;ldquo;dc1&amp;rdquo;, &amp;rdquo;pattern&amp;rdquo;: &amp;ldquo;*&amp;ldquo;, &amp;rdquo;mergeGroups&amp;rdquo;: [ “dc1-user-rpc:2&amp;rdquo;, &amp;rdquo;dc2-user-rpc:1&amp;rdquo; ], &amp;rdquo;routeRules&amp;rdquo;: [], &amp;rdquo;remark&amp;rdquo;: &amp;ldquo;切换30%流量到另外一个机房&amp;rdquo; }
路由规则指令示例 { &amp;rdquo;index&amp;rdquo;: 1, &amp;rdquo;version&amp;rdquo;: &amp;ldquo;1.0&amp;rdquo;, &amp;rdquo;dc&amp;rdquo;: &amp;ldquo;dc1&amp;rdquo;, &amp;rdquo;pattern&amp;rdquo;: &amp;ldquo;*&amp;ldquo;, &amp;rdquo;mergeGroups&amp;rdquo;: [], &amp;rdquo;routeRules&amp;rdquo;: [ “!10.75.0.8 to !10.75.0.5”， “ * to !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idevz.org/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idevz.org/1/01/</guid>
      <description>Description = &amp;ldquo;&amp;rdquo; Tags = [&amp;ldquo;ServiceMesh&amp;rdquo;] Categories = [&amp;ldquo;技术&amp;rdquo;, &amp;ldquo;微服务&amp;rdquo;,&amp;ldquo;ServiceMesh&amp;rdquo;] title = &amp;ldquo;Service mesh — 一种新的模式而不是新技术&amp;rdquo; date = &amp;ldquo;2013-11-13T22:11:56+08:00&amp;rdquo; draft = false toc = true
原著信息： A Million WebSockets and Go
**by:Sergey Kamardin
https://changkun.us/archives/2018/07/254/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idevz.org/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idevz.org/1/01/</guid>
      <description>Description = &amp;ldquo;&amp;rdquo; Tags = [&amp;ldquo;ServiceMesh&amp;rdquo;] Categories = [&amp;ldquo;技术&amp;rdquo;, &amp;ldquo;微服务&amp;rdquo;,&amp;ldquo;ServiceMesh&amp;rdquo;] title = &amp;ldquo;从头开始使用内存分配器的可视化指南(Golang)&amp;rdquo; date = &amp;ldquo;2013-11-13T22:11:56+08:00&amp;rdquo; draft = false toc = true
原著信息： A visual guide to Go Memory Allocator from scratch (Golang)
by:Ankur Anand
When I first started trying to understand the memory allocator of Go, it was maddening. Everything seemed like a mystical black box. As almost every technical wizardry is hidden beneath abstractions, you need to peel off those layers one by one to understand it.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idevz.org/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idevz.org/1/01/</guid>
      <description>Description = &amp;ldquo;&amp;rdquo; Tags = [&amp;ldquo;ServiceMesh&amp;rdquo;] Categories = [&amp;ldquo;技术&amp;rdquo;, &amp;ldquo;工具&amp;rdquo;,&amp;ldquo;Hugo&amp;rdquo;] title = &amp;ldquo;如何将 Hugo 网站托管到 GitHub&amp;rdquo; date = &amp;ldquo;2018-11-13T22:11:56+08:00&amp;rdquo; draft = false toc = true
原著信息： Host on GitHub
by:gohugo.io
Host on GitHub Deploy Hugo as a GitHub Pages project or personal/organizational site and automate the whole process with a simple shell script.
GitHub provides free and fast static hosting over SSL for personal, organization, or project pages directly from a GitHub repository via its GitHub Pages service.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idevz.org/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idevz.org/1/01/</guid>
      <description>Description = &amp;ldquo;&amp;rdquo; Tags = [&amp;ldquo;ServiceMesh&amp;rdquo;] Categories = [&amp;ldquo;技术&amp;rdquo;, &amp;ldquo;微服务&amp;rdquo;,&amp;ldquo;ServiceMesh&amp;rdquo;] title = &amp;ldquo;Service mesh — 一种新的模式而不是新技术&amp;rdquo; date = &amp;ldquo;2013-11-13T22:11:56+08:00&amp;rdquo; draft = false toc = true
原著信息： lua-nginx-module
commitID:61e4d0a
by:OpenResty
Name ngx_http_lua_module - Embed the power of Lua into Nginx HTTP Servers.
This module is a core component of OpenResty. If you are using this module, then you are essentially using OpenResty :)
This module is not distributed with the Nginx source.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idevz.org/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idevz.org/1/01/</guid>
      <description>+++ Description = &amp;ldquo;&amp;rdquo; Tags = [&amp;ldquo;微服务&amp;rdquo;, &amp;ldquo;servicemesh&amp;rdquo;,&amp;ldquo;APIGateWay&amp;rdquo;] Categories = [&amp;ldquo;技术&amp;rdquo;, &amp;ldquo;微服务&amp;rdquo;, &amp;ldquo;servicemesh&amp;rdquo;,&amp;ldquo;APIGateWay&amp;rdquo;] title = &amp;ldquo;ServiceMesh Vs APIGateWay&amp;rdquo; date = &amp;ldquo;2017-09-20T22:11:56+08:00&amp;rdquo; draft = false toc = true
+++
原著信息： Service Mesh vs API Gateway
by:Kasun Indrasiri
In one of my previous articles on service mesh, there were a couple of questions related to the relationship between Service Mesh and API Gateway. So, in this post, I’m planning to discuss the usage of Service Mesh and API Gateway.</description>
    </item>
    
  </channel>
</rss>