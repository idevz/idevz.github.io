<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 做一个善于思考的学习者</title>
    <link>https://idevz.org/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 做一个善于思考的学习者</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>© 2020 idevz.org</copyright>
    <lastBuildDate>Sat, 19 Oct 2019 11:03:16 +0800</lastBuildDate>
    
	<atom:link href="https://idevz.org/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于 Parallels 尝鲜 CentOS-8</title>
      <link>https://idevz.org/2019/10/%E5%9F%BA%E4%BA%8E-parallels-%E5%B0%9D%E9%B2%9C-centos-8/</link>
      <pubDate>Sat, 19 Oct 2019 11:03:16 +0800</pubDate>
      
      <guid>https://idevz.org/2019/10/%E5%9F%BA%E4%BA%8E-parallels-%E5%B0%9D%E9%B2%9C-centos-8/</guid>
      <description>之前为了应对在跨语言开发过程中，需要折腾各种开发环境，我做了一个工具包 runX 来自动化环境部署的过程， 当全新的 CentOS-8 可用后，我就一直想折腾一把，毕竟 7 的内核版本实在太低了。因为最近又对环境部署和自动化工具有些新的想法， 干脆一气呵成，直接在工具集中把这些想法实现出来，但是考虑到变化比较大，而且 runX 本身其实已经是稳定状态， 所以索性搞一个 runX 的全新升级版 Lego。
Lego，旨在想搭积木一样来组合各种部署功能，因为在 runX 这几年的使用过程中，发现经常还是会有些复用的功能， 在 k8s-start 项目中我试验了这种积木的思想，发现很受用。重新整理 runX 到 Lego，主要包含以下几个方面：
 最核心的当然是积木的思想，所有的方法和模块都是可组合的。 新装虚拟机当前可能无法做到完全自动化，但是可以通过组合的方式实现半自动化。  下面是装机初始的一些步骤，相关的代码会逐步整理到 Lego 这个项目中。
Base 装机步骤  修改运行级别，CentOS 7 通过修改 /etc/inittab 已经过时，CentOS 8 使用 Target，见下 通网，往后的各种操作都需要联网进行（设置免密登陆，后续操作都可以通过 ssh 完成） 更换阿里云的 yum 源，阿里云已经建了 CentOS 8 的 yum 源，因为安装 Parallels Tools 依赖的包需要 安装 Parallels Tools(否则无法共享目录，以及使用命令行 prlctl 命令控制 pvm) 关机，设置共享文件夹等通用设置（关机后，在 Parallels 图形界面进行设置较为方便，目前尚未研究通过 prlctl 命令来设置） 安装 Parallels Tools 后，就可以将 Mac 宿主机中的 runX 项目挂载到 pvm 中，运行相关自动化脚本，比如一些基础设置（/etc/profile，/etc/sudoers 等）  修改运行级别，关闭图形界面 systemctl set-default multi-user.</description>
    </item>
    
    <item>
      <title>Service mesh — 一种新的模式而不是新技术</title>
      <link>https://idevz.org/2018/11/service-mesh-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%A8%A1%E5%BC%8F%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B0%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Tue, 13 Nov 2018 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.org/2018/11/service-mesh-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%A8%A1%E5%BC%8F%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B0%E6%8A%80%E6%9C%AF/</guid>
      <description>原著信息： Service Mesh – A New Pattern, Not A New Technology?
by:Marco Palladino
What is Service Mesh and Where Did it Come From? Over the past few months, you may have noticed the explosion of industry chatter and articles surrounding service mesh and the future of software architecture. These discussions have been highly polarizing, with tribes forming around specific vendors. While this partisan trend is to be expected, the common thread among these discussions is the rapid transformation of how APIs are used in the enterprise, and what this means for the topology of our traffic.</description>
    </item>
    
    <item>
      <title>微服务架构的 What，Why，和 How</title>
      <link>https://idevz.org/2018/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84-whatwhy%E5%92%8C-how/</link>
      <pubDate>Tue, 18 Sep 2018 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.org/2018/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84-whatwhy%E5%92%8C-how/</guid>
      <description>原著信息： The What, Why, and How of a Microservices Architecture
by:Jetinder Singh
For many years now we have been building systems and getting better at it. Several technologies, architectural patterns, and best practices have emerged over those years. Microservices is one of those architectural patterns which has emerged from the world of domain-driven design, continuous delivery, platform and infrastructure automation, scalable systems, polyglot programming and persistence.
多年来我们构建系统并且做到越来越好。这些年出现了一些技术、架构模式和最佳实践。微服务是从领域驱动设计，持续交付，平台和基础设施自动化，可扩展系统，多语言编程和持久性领域的架构模式之一。
What is a Microservices Architecture in a Nutshell?</description>
    </item>
    
    <item>
      <title>本地 k8s 集群搭建</title>
      <link>https://idevz.org/2017/12/%E6%9C%AC%E5%9C%B0-k8s-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 13 Dec 2017 12:13:21 +0800</pubDate>
      
      <guid>https://idevz.org/2017/12/%E6%9C%AC%E5%9C%B0-k8s-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid>
      <description>Kubernetes 现在已经成为容器编排的事实标准，是明确的容器云的未来，社区高涨的热情，ServiceMesh、Knative、CNCF 等等无数关键字无一不是在反复突出他的关键地位。 如果架构、服务化的未来是容器云，那么 Kubernetes 必然是最核心的基础。 如果只是希望学习 Kubernetes 的使用，比如基于 Kubernetes 运行一些测试，那最简单的方式就是使用 minikube， 只需要保证有一个可用的 HTTP_PROXY 可用保证其依赖的容器运行时（比如 Docker）可以正常下载 Google 相应的镜像文件，一条命令即可拥有一个单机版 Kubernetes 环境。
minikube start \  --docker-env HTTP_PROXY=${http_proxy} \  --docker-env HTTPS_PROXY=${https_proxy} \  --docker-env NO_PROXY=192.168.99.0/24 在有代理的情况下，先把需要的镜像下载完成，然后在去除环境变量中的代理，来部署 k8s 服务。
但是，如果想更进一步的深入了解 Kubernetes 的更多细节，则需要手动部署，甚至是从源码编译来部署 Kubernetes，我应邀在极客时间做了一个小视频， 并配套了一个部署项目 k8s-start，来说明这个问题，感兴趣的同学可以先看看这个项目。下面是一些学习和使用中遇到的一些值得关注的问题。
product_uuid 与 MAC 地址唯一性 我习惯使用 parallels 在本机虚拟出 Linux 来作为部署的服务器，而且为了更快速的按需生成虚拟机，我还有一个好用的项目来驱动，但是快速 clone 虚拟机会带来直接的问题就是 product_uuid 的唯一性得不到保障（sudo cat /sys/class/dmi/id/product_uuid），虽然 MAC 地址这些可以重新生成，但是 product_uuid 却不可以（这个数据是内核数据的一个映射，从内存中读出来的），所以最后只能独立安装与集群节点数一致的虚拟机。
安装文档 真是一个字不能漏。
kube-dashboard 服务导出 这里我使用 ingress（ 选用 Nginx-ingress-controller 实现） 的方式来导出服务，当然还有 其他方式 同样可以导出 k8s 集群中的服务。</description>
    </item>
    
    <item>
      <title>使用Vs Code 调试 Golang 程序</title>
      <link>https://idevz.org/2017/12/%E4%BD%BF%E7%94%A8vs-code-%E8%B0%83%E8%AF%95-golang-%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Mon, 11 Dec 2017 20:18:44 +0800</pubDate>
      
      <guid>https://idevz.org/2017/12/%E4%BD%BF%E7%94%A8vs-code-%E8%B0%83%E8%AF%95-golang-%E7%A8%8B%E5%BA%8F/</guid>
      <description>安装 dlv 因为我使用虚拟机开发，Mac 宿主机与 CentOS 虚拟机的 GOPATH 都指向了同一个路径，所以我的 Golang bin 路径是重合的 所以我需要在两个机器上都有一份各自的 dlv，好在 Mac 有 brew，所以 Mac brew 安装的 dlv 就可以避免抢占 GOPATH 路径了。下面记录几个安装中的小问题。
Mac 安装 dlv brew install 未必会好使，因为 brew 安装是非 root 安装，而 dlv 需要添加系统认证证书，可能会遇到如下安装不成功的报错。
==&amp;gt; Installing delve from go-delve/delve ==&amp;gt; Downloading https://github.com/derekparker/delve/archive/v1.0.0-rc.2.tar.gz Already downloaded: /Users/idevz/Library/Caches/Homebrew/delve-1.0.0-rc.2.tar.gz security: SecKeychainSearchCopyNext: The specified item could not be found in the keychain. ==&amp;gt; Generating dlv-cert ==&amp;gt; openssl req -new -newkey rsa:2048 -x509 -days 3650 -nodes -config dlv-cert.</description>
    </item>
    
    <item>
      <title>跟踪及时编译 / Tracing JIT</title>
      <link>https://idevz.org/2017/12/%E8%B7%9F%E8%B8%AA%E5%8F%8A%E6%97%B6%E7%BC%96%E8%AF%91-/-tracing-jit/</link>
      <pubDate>Mon, 04 Dec 2017 15:40:34 +0800</pubDate>
      
      <guid>https://idevz.org/2017/12/%E8%B7%9F%E8%B8%AA%E5%8F%8A%E6%97%B6%E7%BC%96%E8%AF%91-/-tracing-jit/</guid>
      <description>跟踪及时编译（Tracing JIT Compilation） 是一种虚拟机在程序运行时用来优化程序执行性能的技术，实现方式是通过对频繁执行操作的线性序列的统计并将其编译为本地机器码，并且执行他们。 这与传统基于每个方法进行编译优化的 JIT 编译有着本质的不同。
JIT 概览 及时编译（Just-in-time compilation） 是一种在运行时将部分程序编译为机器码来提升程序执行速度的技术。一种对不同 JIT 编译技术分类的方法是通过他们编译的范围。 基于方法的 JIT 编译器每次将一个方法编译成机器码，而 Tracing JIT 编译器将经常执行的循环序列作为它们编译的单元。 Tracing JIT 编译器基于这样的一个假设，即，程序在某些比较热的循环（“hot loops”）花费执行的大部分时间，并且后续的循环迭代往往执行相同的代码路径。拥有 Tracing JIT 编译器的虚拟机通常除了一个 Tracing JIT 编译器他们还有要么一个解释器，或者一个基于方法的编译器这样混合模式的执行环境。
Tracing JIT 编译器的技术细 Tracing JIT 编译器 在运行时经过多个阶段。 首先，收集循环的 profiling 信息。在一个热循环被确认后，将进入一个记录着该循环所有执行操作的特殊的跟踪模式（tracing mode），将所有操作序列记为一条 trace。随后这条 trace 将被优化并编译成机器码（trace）。 当这个循环再一次被执行的时候，被调用的将会是编译过的 trace 而不是相关的程序。
  相关各执行阶段解释如下:
 
--- title: idevz.org menu: main weight: -270 --- ### 关键字：  #### &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[技术](/tech)  &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[OpenResty](/categories/openresty) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Service - Mesh](/categories/servicemesh) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[微服务](/categories/微服务/) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[PHP](/categories/php) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Golang](/categories/golang) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Vanilla](/categories/vanilla) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[How-To](/categories/how-to) #### &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[工具](/tools)  #### &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Life](/life) -- 分析（Profiling）阶段 Profiling 的目的在于识别出热循环（hot loops）。通常是通过统计每个循环的迭代次数来实现的，在一个循环执行的次数超过某些阈值，这个循环将被认为是热的，随机将进入 Tracing 模式。</description>
    </item>
    
    <item>
      <title>微服务的服务网格</title>
      <link>https://idevz.org/2017/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</link>
      <pubDate>Mon, 18 Sep 2017 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.org/2017/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</guid>
      <description>原著信息： Service Mesh for Microservices
by:Kasun Indrasiri
Microservices architecture has been evolving a lot during the last couple of years and there are quite a few new concepts and patterns are emerging. ‘Service Mesh’ concept is getting quite popular. In this post, I’m planning to cover the key concepts related to Service Mesh and how it is used in real-world microservices implementations.
微服务架构在过去几年中发展很多，出现了相当多的新的概念和模式。“Service Mesh” 的概念越来越受欢迎。本文，我计划涵盖 Service Mesh 的关键概念以及如何在实际的微服务实现中使用。
Why ‘Service Mesh’?</description>
    </item>
    
    <item>
      <title>微服务分层架构</title>
      <link>https://idevz.org/2017/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Sat, 16 Sep 2017 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.org/2017/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84/</guid>
      <description>原著信息： Microservices Layered Architecture
by:Kasun Indrasiri
With Microservices architecture, a single software application/functionality is implemented as a combination of multiple microservices and their interactions. Hence the communications between services and their coordination are vital for a successful realization of microservices architecture.
在微服务架构中，单个软件应用 / 功能被实现为多个微服务及其交互的组合。因此服务间的通信及他们的协调对于成功实现微服务架构至关重要。
It is important to understand that, the tasks that an ESB does in an ESB based SOA implementation, don’t simply disappear when you switch to Microservices Architecture.</description>
    </item>
    
    <item>
      <title>CentOS 如何打 RPM 包</title>
      <link>https://idevz.org/2017/07/centos-%E5%A6%82%E4%BD%95%E6%89%93-rpm-%E5%8C%85/</link>
      <pubDate>Thu, 27 Jul 2017 19:55:52 +0800</pubDate>
      
      <guid>https://idevz.org/2017/07/centos-%E5%A6%82%E4%BD%95%E6%89%93-rpm-%E5%8C%85/</guid>
      <description>打包前的准备 安装相关打包工具  sudo yum install rpmdevtools rpmlint rpmbuild --version
❯ rpmbuild --version z@z RPM 版本 4.11.3  新建用户 RPM 在打包的过程中会将文件临时安装到系统中，为了保证构建程序不破坏系统环境，要使用普通用户打包：
sudo useradd rpmuser sudo passwd rpmuser su - rpmuser 初始化打包环境 rpmdev-setuptree是rpmdevtools中带的初始化环境脚本，执行后会在用户主目录下创建rpmbuild目录和.rpmmacros文件，同时生成所需的子目录和默认的控制参数，执行：
rpmdev-setuptree 生成的目录结构:
`-- rpmbuild |-- BUILD |-- RPMS |-- SOURCES |-- SPECS `-- SRPMS 默认的全局控制宏文件.rpmmacros内容：
%_topdir %(echo $HOME)/rpmbuild %_smp_mflags %( \  [ -z &amp;#34;$RPM_BUILD_NCPUS&amp;#34; ] \\\  &amp;amp;&amp;amp; RPM_BUILD_NCPUS=&amp;#34;`/usr/bin/nproc 2&amp;gt;/dev/null || \\\ /usr/bin/getconf _NPROCESSORS_ONLN`&amp;#34;; \\\  if [ &amp;#34;$RPM_BUILD_NCPUS&amp;#34; -gt 16 ]; then \\\  echo &amp;#34;-j16&amp;#34;; \\\  elif [ &amp;#34;$RPM_BUILD_NCPUS&amp;#34; -gt 3 ]; then \\\  echo &amp;#34;-j$RPM_BUILD_NCPUS&amp;#34;; \\\  else \\\  echo &amp;#34;-j3&amp;#34;; \\\  fi ) %__arch_install_post \  [ &amp;#34;%{buildarch}&amp;#34; = &amp;#34;noarch&amp;#34; ] || QA_CHECK_RPATHS=1 ; \  case &amp;#34;${QA_CHECK_RPATHS:-}&amp;#34; in [1yY]*) /usr/lib/rpm/check-rpaths ;; esac \  /usr/lib/rpm/check-buildroot 安装编译软件 制作rpm包要先编译在打二进制包，所以要装 gcc、make 等工具，如果是给 Golang 的项目打 RPM 包，还需要有 go 环境</description>
    </item>
    
    <item>
      <title>Service mesh — 一种新的模式而不是新技术</title>
      <link>https://idevz.org/2013/11/service-mesh-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%A8%A1%E5%BC%8F%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B0%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Wed, 13 Nov 2013 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.org/2013/11/service-mesh-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%A8%A1%E5%BC%8F%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B0%E6%8A%80%E6%9C%AF/</guid>
      <description>原著信息： How to Make Your Open Source Project Really Awesome
by:Clojure Werkz
https://www.iteye.com/news/27656</description>
    </item>
    
  </channel>
</rss>