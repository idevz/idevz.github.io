<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>servicemesh on 做一个善于思考的学习者</title>
    <link>https://idevz.github.io/categories/servicemesh/</link>
    <description>Recent content in servicemesh on 做一个善于思考的学习者</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>© 2020 idevz.org</copyright>
    <lastBuildDate>Tue, 13 Nov 2018 22:11:56 +0800</lastBuildDate>
    
	<atom:link href="https://idevz.github.io/categories/servicemesh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Service mesh — 一种新的模式而不是新技术</title>
      <link>https://idevz.github.io/2018/11/service-mesh-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%A8%A1%E5%BC%8F%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B0%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Tue, 13 Nov 2018 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.github.io/2018/11/service-mesh-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%A8%A1%E5%BC%8F%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B0%E6%8A%80%E6%9C%AF/</guid>
      <description>原著信息： Service Mesh – A New Pattern, Not A New Technology?
by:Marco Palladino
What is Service Mesh and Where Did it Come From? Over the past few months, you may have noticed the explosion of industry chatter and articles surrounding service mesh and the future of software architecture. These discussions have been highly polarizing, with tribes forming around specific vendors. While this partisan trend is to be expected, the common thread among these discussions is the rapid transformation of how APIs are used in the enterprise, and what this means for the topology of our traffic.</description>
    </item>
    
    <item>
      <title>本地 k8s 集群搭建</title>
      <link>https://idevz.github.io/2017/12/%E6%9C%AC%E5%9C%B0-k8s-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 13 Dec 2017 12:13:21 +0800</pubDate>
      
      <guid>https://idevz.github.io/2017/12/%E6%9C%AC%E5%9C%B0-k8s-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid>
      <description>Kubernetes 现在已经成为容器编排的事实标准，是明确的容器云的未来，社区高涨的热情，ServiceMesh、Knative、CNCF 等等无数关键字无一不是在反复突出他的关键地位。 如果架构、服务化的未来是容器云，那么 Kubernetes 必然是最核心的基础。 如果只是希望学习 Kubernetes 的使用，比如基于 Kubernetes 运行一些测试，那最简单的方式就是使用 minikube， 只需要保证有一个可用的 HTTP_PROXY 可用保证其依赖的容器运行时（比如 Docker）可以正常下载 Google 相应的镜像文件，一条命令即可拥有一个单机版 Kubernetes 环境。
minikube start \  --docker-env HTTP_PROXY=${http_proxy} \  --docker-env HTTPS_PROXY=${https_proxy} \  --docker-env NO_PROXY=192.168.99.0/24 在有代理的情况下，先把需要的镜像下载完成，然后在去除环境变量中的代理，来部署 k8s 服务。
但是，如果想更进一步的深入了解 Kubernetes 的更多细节，则需要手动部署，甚至是从源码编译来部署 Kubernetes，我应邀在极客时间做了一个小视频， 并配套了一个部署项目 k8s-start，来说明这个问题，感兴趣的同学可以先看看这个项目。下面是一些学习和使用中遇到的一些值得关注的问题。
product_uuid 与 MAC 地址唯一性 我习惯使用 parallels 在本机虚拟出 Linux 来作为部署的服务器，而且为了更快速的按需生成虚拟机，我还有一个好用的项目来驱动，但是快速 clone 虚拟机会带来直接的问题就是 product_uuid 的唯一性得不到保障（sudo cat /sys/class/dmi/id/product_uuid），虽然 MAC 地址这些可以重新生成，但是 product_uuid 却不可以（这个数据是内核数据的一个映射，从内存中读出来的），所以最后只能独立安装与集群节点数一致的虚拟机。
安装文档 真是一个字不能漏。
kube-dashboard 服务导出 这里我使用 ingress（ 选用 Nginx-ingress-controller 实现） 的方式来导出服务，当然还有 其他方式 同样可以导出 k8s 集群中的服务。</description>
    </item>
    
    <item>
      <title>微服务的服务网格</title>
      <link>https://idevz.github.io/2017/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</link>
      <pubDate>Mon, 18 Sep 2017 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.github.io/2017/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</guid>
      <description>原著信息： Service Mesh for Microservices
by:Kasun Indrasiri
Microservices architecture has been evolving a lot during the last couple of years and there are quite a few new concepts and patterns are emerging. ‘Service Mesh’ concept is getting quite popular. In this post, I’m planning to cover the key concepts related to Service Mesh and how it is used in real-world microservices implementations.
微服务架构在过去几年中发展很多，出现了相当多的新的概念和模式。“Service Mesh” 的概念越来越受欢迎。本文，我计划涵盖 Service Mesh 的关键概念以及如何在实际的微服务实现中使用。
Why ‘Service Mesh’?</description>
    </item>
    
    <item>
      <title>Service mesh — 一种新的模式而不是新技术</title>
      <link>https://idevz.github.io/2013/11/service-mesh-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%A8%A1%E5%BC%8F%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B0%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Wed, 13 Nov 2013 22:11:56 +0800</pubDate>
      
      <guid>https://idevz.github.io/2013/11/service-mesh-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E6%A8%A1%E5%BC%8F%E8%80%8C%E4%B8%8D%E6%98%AF%E6%96%B0%E6%8A%80%E6%9C%AF/</guid>
      <description>原著信息： How to Make Your Open Source Project Really Awesome
by:Clojure Werkz
https://www.iteye.com/news/27656</description>
    </item>
    
  </channel>
</rss>