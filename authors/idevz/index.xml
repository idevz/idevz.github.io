<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>idevz on 做一个善于思考的学习者</title>
    <link>https://idevz.org/authors/idevz/</link>
    <description>Recent content in idevz on 做一个善于思考的学习者</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>© 2020 idevz.org</copyright>
    <lastBuildDate>Fri, 25 Oct 2019 15:34:57 +0800</lastBuildDate>
    
	<atom:link href="https://idevz.org/authors/idevz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shell 函数返回值小记</title>
      <link>https://idevz.org/2019/10/shell-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Fri, 25 Oct 2019 15:34:57 +0800</pubDate>
      
      <guid>https://idevz.org/2019/10/shell-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%B0%8F%E8%AE%B0/</guid>
      <description>日常难免会有些 shell 脚本编写的事情，众所周知这事儿门槛很低，再不济把要执行的命令挨排垒进去也可以作为 一个自动化脚本，但有些复杂的功能或者考虑到代码的复用就需要分些模块、封装些函数了。如何更优雅的 处理函数的返回值便成为一个比较有意思的问题。
在 Shell 函数中优雅返回 shell 脚本没什么特别的技法可言，更多的只能是靠逐步积累。这次在编写 Lego 项目命令检查函数时， 需要获取一个返回值，我期待这个返回值不仅仅表达成功与否这个 2 元的结果。但我自己又习惯 在每个脚本前面都加上 set -e 选项，它的意义在于：如果命令失败（即返回一个非零的退出状态），那么脚本将退出。
通常避免非零值的返回导致整个程序退出的方法要么把调用过程放到 $() 中，要么就是将其与 &amp;amp;&amp;amp; 或 || 命令放到一起，而在这后面获取函数调用的返回值，这样就保证及时返回值为非 0，程序还是能按条件往下执行。下面对后者给出一个示例：
call_some_function &amp;#34;${args}&amp;#34; || ret=$? if [ &amp;#34;${ret}&amp;#34; = &amp;#39;false&amp;#39; ]; then echo &amp;#34;do something&amp;#34; fi 返回码小结 类 Unix 系统对返回码做了统一的规范，无论是 exit 还是 return 命令，都是统一的返回规则，这里对 这些标准的错误码（返回码）做一个简单的梳理，值得注意的是如果返回码超出规定的 0 ~ 255 这个范围，则会随机返回一个这期间的数字：
   Exit Code Number Meaning Example Comments     0 命令成功完成 exit 0 当命令正确完成、返回或者退出的时候，返回码为 0   1 通常的未知错误 / Catchall for general errors let &amp;ldquo;var1 = 1&amp;frasl;0&amp;rdquo; Miscellaneous errors, such as &amp;ldquo;divide by zero&amp;rdquo; and other impermissible operations   2 误用shell命令 / Misuse of shell builtins (according to Bash documentation) empty_function() {} Missing keyword or command, or permission problem (and diff return code on a failed   126 命令无法执行 / Command invoked cannot execute /dev/null Permission problem or command is not an executable   127 没有找到命令 / &amp;ldquo;command not found&amp;rdquo; illegal_command Possible problem with $PATH or a typo   128 无效的退出参数 / Invalid argument to exit exit 3.</description>
    </item>
    
    <item>
      <title>基于 Parallels 尝鲜 CentOS-8</title>
      <link>https://idevz.org/2019/10/%E5%9F%BA%E4%BA%8E-parallels-%E5%B0%9D%E9%B2%9C-centos-8/</link>
      <pubDate>Sat, 19 Oct 2019 11:03:16 +0800</pubDate>
      
      <guid>https://idevz.org/2019/10/%E5%9F%BA%E4%BA%8E-parallels-%E5%B0%9D%E9%B2%9C-centos-8/</guid>
      <description>之前为了应对在跨语言开发过程中，需要折腾各种开发环境，我做了一个工具包 runX 来自动化环境部署的过程， 当全新的 CentOS-8 可用后，我就一直想折腾一把，毕竟 7 的内核版本实在太低了。因为最近又对环境部署和自动化工具有些新的想法， 干脆一气呵成，直接在工具集中把这些想法实现出来，但是考虑到变化比较大，而且 runX 本身其实已经是稳定状态， 所以索性搞一个 runX 的全新升级版 Lego。
Lego，旨在想搭积木一样来组合各种部署功能，因为在 runX 这几年的使用过程中，发现经常还是会有些复用的功能， 在 k8s-start 项目中我试验了这种积木的思想，发现很受用。重新整理 runX 到 Lego，主要包含以下几个方面：
 最核心的当然是积木的思想，所有的方法和模块都是可组合的。 新装虚拟机当前可能无法做到完全自动化，但是可以通过组合的方式实现半自动化。  下面是装机初始的一些步骤，相关的代码会逐步整理到 Lego 这个项目中。
Base 装机步骤  修改运行级别，CentOS 7 通过修改 /etc/inittab 已经过时，CentOS 8 使用 Target，见下 通网，往后的各种操作都需要联网进行（设置免密登陆，后续操作都可以通过 ssh 完成） 更换阿里云的 yum 源，阿里云已经建了 CentOS 8 的 yum 源，因为安装 Parallels Tools 依赖的包需要 安装 Parallels Tools(否则无法共享目录，以及使用命令行 prlctl 命令控制 pvm) 关机，设置共享文件夹等通用设置（关机后，在 Parallels 图形界面进行设置较为方便，目前尚未研究通过 prlctl 命令来设置） 安装 Parallels Tools 后，就可以将 Mac 宿主机中的 runX 项目挂载到 pvm 中，运行相关自动化脚本，比如一些基础设置（/etc/profile，/etc/sudoers 等）  修改运行级别，关闭图形界面 systemctl set-default multi-user.</description>
    </item>
    
    <item>
      <title>跟踪及时编译 / Tracing JIT</title>
      <link>https://idevz.org/2017/12/%E8%B7%9F%E8%B8%AA%E5%8F%8A%E6%97%B6%E7%BC%96%E8%AF%91-/-tracing-jit/</link>
      <pubDate>Mon, 04 Dec 2017 15:40:34 +0800</pubDate>
      
      <guid>https://idevz.org/2017/12/%E8%B7%9F%E8%B8%AA%E5%8F%8A%E6%97%B6%E7%BC%96%E8%AF%91-/-tracing-jit/</guid>
      <description>跟踪及时编译（Tracing JIT Compilation） 是一种虚拟机在程序运行时用来优化程序执行性能的技术，实现方式是通过对频繁执行操作的线性序列的统计并将其编译为本地机器码，并且执行他们。 这与传统基于每个方法进行编译优化的 JIT 编译有着本质的不同。
JIT 概览 及时编译（Just-in-time compilation） 是一种在运行时将部分程序编译为机器码来提升程序执行速度的技术。一种对不同 JIT 编译技术分类的方法是通过他们编译的范围。 基于方法的 JIT 编译器每次将一个方法编译成机器码，而 Tracing JIT 编译器将经常执行的循环序列作为它们编译的单元。 Tracing JIT 编译器基于这样的一个假设，即，程序在某些比较热的循环（“hot loops”）花费执行的大部分时间，并且后续的循环迭代往往执行相同的代码路径。拥有 Tracing JIT 编译器的虚拟机通常除了一个 Tracing JIT 编译器他们还有要么一个解释器，或者一个基于方法的编译器这样混合模式的执行环境。
Tracing JIT 编译器的技术细 Tracing JIT 编译器 在运行时经过多个阶段。 首先，收集循环的 profiling 信息。在一个热循环被确认后，将进入一个记录着该循环所有执行操作的特殊的跟踪模式（tracing mode），将所有操作序列记为一条 trace。随后这条 trace 将被优化并编译成机器码（trace）。 当这个循环再一次被执行的时候，被调用的将会是编译过的 trace 而不是相关的程序。
  相关各执行阶段解释如下:
 
--- title: idevz.org menu: main weight: -270 --- ### 关键字：  #### &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[技术](/tech)  &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[OpenResty](/categories/openresty) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Service - Mesh](/categories/servicemesh) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[微服务](/categories/微服务/) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[PHP](/categories/php) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Golang](/categories/golang) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Vanilla](/categories/vanilla) &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[How-To](/categories/how-to) #### &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[工具](/tools)  #### &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Life](/life) -- 分析（Profiling）阶段 Profiling 的目的在于识别出热循环（hot loops）。通常是通过统计每个循环的迭代次数来实现的，在一个循环执行的次数超过某些阈值，这个循环将被认为是热的，随机将进入 Tracing 模式。</description>
    </item>
    
  </channel>
</rss>