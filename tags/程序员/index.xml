<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序员 on 做一个善于思考的学习者</title>
    <link>https://idevz.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/</link>
    <description>Recent content in 程序员 on 做一个善于思考的学习者</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>© 2020 idevz.org</copyright>
    <lastBuildDate>Mon, 10 Jul 2017 16:28:49 +0800</lastBuildDate>
    
	<atom:link href="https://idevz.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>use google much more better</title>
      <link>https://idevz.github.io/2017/07/use-google-much-more-better/</link>
      <pubDate>Mon, 10 Jul 2017 16:28:49 +0800</pubDate>
      
      <guid>https://idevz.github.io/2017/07/use-google-much-more-better/</guid>
      <description>http://www.googleguide.com/advanced_operators_reference.html
http://article.yeeyan.org/view/6774/2620
https://www.zhihu.com/question/20161362
http://i.idevz.org/91d36cd9e5bef1030380894911782358_b.png
作者：崔凯 链接：https://www.zhihu.com/question/20161362/answer/14180620 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
1、双引号把搜索词放在双引号中，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。bd和Google 都支持这个指令。例如搜索： “seo方法图片”2、减号减号代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要排除的词。Google 和bd都支持这个指令。例如：搜索 -引擎返回的则是包含“搜索”这个词，却不包含“引擎”这个词的结果3、星号星号*是常用的通配符，也可以用在搜索中。百度不支持*号搜索指令。比如在Google 中搜索：搜索*擎其中的*号代表任何文字。返回的结果就不仅包含“搜索引擎”，还包含了“搜索收擎”，“搜索巨擎”等内容。4、inurlinurl: 指令用于搜索查询词出现在url 中的页面。bd和Google 都支持inurl 指令。inurl 指令支持中文和英文。比如搜索：inurl:搜索引擎优化返回的结果都是网址url 中包含“搜索引擎优化”的页面。由于关键词出现在url 中对排名有一定影响，使用inurl:搜索可以更准确地找到竞争对手。5、inanchorinanchor:指令返回的结果是导入链接锚文字中包含搜索词的页面。百度不支持inanchor。比如在Google 搜索 ：inanchor:点击这里返回的结果页面本身并不一定包含“点击这里”这四个字，而是指向这些页面的链接锚文字中出现了“点击这里”这四个字。可以用来找到某个关键词的竞争对收，而且这些竞争对手往往是做过SEO 的。研究竞争对手页面有哪些外部链接，就可以找到很多链接资源。6、intitleintitle: 指令返回的是页面title 中包含关键词的页面。Google 和bd都支持intitle 指令。使用intitle 指令找到的文件是更准确的竞争页面。如果关键词只出现在页面可见文字中，而没有出现在title 中，大部分情况是并没有针对关键词进行优化，所以也不是有力的竞争对手。7、allintitleallintitle:搜索返回的是页面标题中包含多组关键词的文件。例如 ：allintitle:SEO 搜索引擎优化就相当于：intitle:SEO intitle:搜索引擎优化返回的是标题中中既包含“SEO”，也包含“搜索引擎优化”的页面8、allinurl与allintitle: 类似。allinurl:SEO 搜索引擎优化就相当于 ：inurl:SEO inurl:搜索引擎优化9、filetype用于搜索特定文件格式。Google 和bd都支持filetype 指令。比如搜索filetype:pdf SEO返回的就是包含SEO 这个关键词的所有pdf 文件。10、sitesite:是SEO 最熟悉的高级搜索指令，用来搜索某个域名下的所有文件。11、linkdomainlinkdomain:指令只适用于雅虎，返回的是某个域名的反向链接。雅虎的反向链接数据还比较准确，是SEO 人员研究竞争对手外部链接情况的重要工具之一。比如搜索linkdomain:http://cnseotool.com -site:http://cnseotool.com得到的就是点石网站的外部链接，因为-site:http://cnseotool.com 已经排除了点石本身的页面，也就是内部链接，剩下的就都是外部链接了。12、relatedrelated:指令只适用于Google，返回的结果是与某个网站有关联的页面。比如搜索related:http://cnseotool.com我们就可以得到Google 所认为的与点石网站有关联的其他页面。 这种关联到底指的是什么，Google 并没有明确说明，一般认为指的是有共同外部链接的网站。上面介绍的这几个高级搜索指令，单独使用可以找到不少资源，或者可以更精确地定位竞争对手。把这些指令混合起来使用则更强大。inurl:gov 减肥返回的就是url 中包含gov，页面中有“减肥”这个词的页面。很多SEO 人员认为GVM和学校网站有比较高的权重，找到相关的GVM和学校网站，就找到了最好的链接资源。下面这个指令返回的是来自.中国教育和科研计算机网CERNET，也就是学校域名上的包含“交换链接”这个词的页面：inurl:.中国教育和科研计算机网CERNET 交换链接从中SEO 人员可以找到愿意交换链接的学校网站。或者使用一个更精确的搜索：inurl:.中国教育和科研计算机网CERNET intitle:交换链接返回的则是来自中国教育和科研计算机网CERNET 域名，标题中包含“交换链接”这四个字的页面，返回的结果大部分应该是愿意交换链接的学校网站。再比如下面这个指令：inurl:中国教育和科研计算机网CERNET*register返回的结果是在.中国教育和科研计算机网CERNET 域名上，url 中包含“forum”以及“register”这两个单词的页面，也就是学校论坛的注册页面。找到这些论坛，也就找到了能在高权重域名上留下签名的很多机会。下面这个指令返回的是页面与减肥有关，url 中包含links 这个单词的页面：减肥 inurl:links很多站长把交换链接页面命名为links.html 等，所以这个指令返回的就是与减肥主题相关的交换链接页面。下面这个指令返回的是url 中包含http://gov.cn 以及links 的页面，也就是GVM域名上的交换链接页面：allinurl:gov.cn+links最后一个例子，在雅虎搜索这个指令：linkdomain:http://cnseotool.com -linkdomain:http://cnseotool.com返回的是链接到点石网站，却没有链接到我的博客的网站。使用这个指令可以找到很多连向你的竞争对手或其他同行业网站，却没连向你的网站的页面，这些网站是最好的链接资源。高级搜索指令组合使用变化多端，功能强大。一个合格的SEO必须熟练掌握这几个常用指令的意义及组合方法，才能更有效率地找到更多竞争对手和链接资源。找外链的时候你可以用这几种命令组合，例如site:.com inurl:blog “post a comment” -”comments closed” -”you must be logged in” “输入你的关键词“，site:.</description>
    </item>
    
    <item>
      <title>fig</title>
      <link>https://idevz.github.io/2017/07/fig/</link>
      <pubDate>Mon, 10 Jul 2017 16:15:54 +0800</pubDate>
      
      <guid>https://idevz.github.io/2017/07/fig/</guid>
      <description>https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-2-coding-style-guide-cn.md PHP-FIG master PSR-0-cn.md PSR-1-basic-coding-standard-cn.md PSR-2-coding-style-guide-cn.md PSR-2-coding-style-guide-meta-cn.md PSR-3-logger-interface-cn.md PSR-4-autoloader-cn.md PSR-4-autoloader-examples.md PSR-4-autoloader-meta.md PSR-7-http-message-interfaces.md README.md</description>
    </item>
    
    <item>
      <title>如何快速学习一个开源项目</title>
      <link>https://idevz.github.io/2017/07/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Thu, 06 Jul 2017 15:40:23 +0800</pubDate>
      
      <guid>https://idevz.github.io/2017/07/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</guid>
      <description>如何熟悉一个开源项目？ 你有个任务，需要用到某个开源项目;或者老大交代你一个事情，让你去了解某个东西。怎么下手呢？如何开始呢？我的习惯是这样：
1.首先，查找和阅读该项目的博客和资料，通过google你能找到某个项目大体介绍的博客，快速阅读一下就能对项目的目的、功能、基本使用有个大概的了解。
2.阅读项目的文档，重点关注类似Getting started、Example之类的文档，从中学习如何下载、安装、甚至基本使用该项目所需要的知识。
3.如果该项目有提供现成的example工程，首先尝试按照开始文档的介绍运行example，如果运行顺利，那么恭喜你顺利开了个好头;如果遇到问题，首先尝试在项目的FAQ等文档里查找答案，再次，可以将问题（例如异常信息）当成关键词去搜索，查找相关的解决办法，你遇到了，别人一般也会遇到，热心的朋友会记录下解决的过程;最后，可以将问题提交到项目的邮件列表，请大家帮你看看。在没有成功运行example之前，不要尝试修改example。4.运行了第一个example之后，尝试根据你的理解和需要修改example，测试高级功能等。
5.在了解基本使用后，需要开始深入的了解该项目。例如项目的配置管理、高级功能以及最佳实践。通常一个运作良好的项目会提供一份从浅到深的用户指南，你并不需要从头到尾阅读这份指南，根据时间和兴趣，特别是你自己任务的需要，重点阅读部分章节并做笔记（推荐evernote）。
6.如果时间允许，尝试从源码构建该项目。通常开源项目都会提供一份构建指南，指导你如何搭建一个用于开发、调试和构建的环境。尝试构建一个版本。
7.如果时间允许并且有兴趣，可以尝试阅读源码： （1）阅读源码之前，查看该项目是否提供架构和设计文档，阅读这些文档可以了解该项目的大体设计和结构，读源码的时候不会无从下手。 （2）阅读源码之前，一定要能构建并运行该项目，有个直观感受。 （3）阅读源码的第一步是抓主干，尝试理清一次正常运行的代码调用路径，这可以通过debug来观察运行时的变量和行为。修改源码加入日志和打印可以帮助你更好的理解源码。 （4）适当画图来帮助你理解源码，在理清主干后，可以将整个流程画成一张流程图或者标准的UML图，帮助记忆和下一步的阅读。 （5）挑选感兴趣的“枝干”代码来阅读，比如你对网络通讯感兴趣，就阅读网络层的代码，深入到实现细节，如它用了什么库，采用了什么设计模式，为什么这样做等。如果可以，debug细节代码。 （6）阅读源码的时候，重视单元测试，尝试去运行单元测试，基本上一个好的单元测试会将该代码的功能和边界描述清楚。 （7）在熟悉源码后，发现有可以改进的地方，有精力、有意愿可以向该项目的开发者提出改进的意见或者issue，甚至帮他修复和实现，参与该项目的发展。
8.通常在阅读文档和源码之后，你能对该项目有比较深入的了解了，但是该项目所在领域，你可能还想搜索相关的项目和资料，看看有没有其他的更好的项目或者解决方案。在广度和深度之间权衡。
​ 以上是我个人的一些习惯，我自己也并没有完全按照这个来，但是按照这个顺序，基本上能让你比较高效地学习和使用某个开源项目。</description>
    </item>
    
    <item>
      <title>如何递归下载FTP中文目录</title>
      <link>https://idevz.github.io/2017/07/%E5%A6%82%E4%BD%95%E9%80%92%E5%BD%92%E4%B8%8B%E8%BD%BDftp%E4%B8%AD%E6%96%87%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Thu, 06 Jul 2017 11:07:17 +0800</pubDate>
      
      <guid>https://idevz.github.io/2017/07/%E5%A6%82%E4%BD%95%E9%80%92%E5%BD%92%E4%B8%8B%E8%BD%BDftp%E4%B8%AD%E6%96%87%E7%9B%AE%E5%BD%95/</guid>
      <description>如何递归下载FTP中文目录 如题，有些时候我们希望能递归下载一个 FTP 目录，有些时候这些目录中还包括中文路径，有些工具并不识别 FTP 的中文目录，这里实践了两种方式，简单记录如下：
wget 使用 wget -r 参数可以实现对一个 FTP 路径的递归下载，如果路径中存在中文路径，下载后路径名将被编码，不再是原来的中文，这时候我们可以添加 --restrict-file-names=nocontrol 选项来解决这个问题。
Filezilla Filezilla 是这里推荐的一种更便捷的方式，我们可以通过在 Filezilla 的站点管理里将 FTP 连接的字符集设置为 GBK 来解决对 FTP 服务器中文目录的显示及访问问题，同时直接用 Filezilla 来做 FTP 同步操作。非常便捷。</description>
    </item>
    
    <item>
      <title>mac apps</title>
      <link>https://idevz.github.io/2017/07/mac-apps/</link>
      <pubDate>Thu, 06 Jul 2017 11:05:32 +0800</pubDate>
      
      <guid>https://idevz.github.io/2017/07/mac-apps/</guid>
      <description>Filezilla http://i.idevz.org/filezilla.png</description>
    </item>
    
    <item>
      <title>git</title>
      <link>https://idevz.github.io/2017/07/git/</link>
      <pubDate>Tue, 04 Jul 2017 11:01:34 +0800</pubDate>
      
      <guid>https://idevz.github.io/2017/07/git/</guid>
      <description> 起头 Git 是
错误搜集 Permission denied (publickey) 错误信息：  /Path/ [master] git pull Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 处理方法： git config remote.origin.url http://xxxx.php.git # 将 ssh 协议地址更新为 http 地址</description>
    </item>
    
    <item>
      <title>优雅的使用 Mac</title>
      <link>https://idevz.github.io/2017/06/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-mac/</link>
      <pubDate>Thu, 15 Jun 2017 16:01:08 +0800</pubDate>
      
      <guid>https://idevz.github.io/2017/06/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-mac/</guid>
      <description>起头 MacOSX 是平时工作生活所使用的系统，从 Windows 走过来，乐不思蜀
lsof Mac 上使用（netstat -an -ptcp）来查看端口使用情况，也可以用 lsof 来查看， 这里是几个基本用法，来自于这篇博文，感谢博主。
lsof -i[46] [protocol][@hostname|hostaddr][:service|port] 46 --&amp;gt; ipv4 or ipv6 protocol --&amp;gt; tcp or udp hostname --&amp;gt; internet host name hostaddr --&amp;gt; ipv4地址 service --&amp;gt; /etc/service中的 service name (可以不只一个) port --&amp;gt; 端口号 (可以不只一个) lsof 查看端口占用 lsof -i:9100 lsof 查看文件被什么进程占用 lsof /etc/hosts COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME Gas\x20Ma 39968 zhoujing2 5r REG 1,4 301 22679474 /private/etc/hosts Google 41670 zhoujing2 25r REG 1,4 301 22679474 /private/etc/hosts Gas Mask 一直报有其他的进程在改 hosts 文件，之前一直不知道为什么，今天用这个命令找到了，居然是 Chrome 。</description>
    </item>
    
    <item>
      <title>优雅的使用 Linux</title>
      <link>https://idevz.github.io/2017/06/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-linux/</link>
      <pubDate>Thu, 15 Jun 2017 16:01:02 +0800</pubDate>
      
      <guid>https://idevz.github.io/2017/06/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8-linux/</guid>
      <description>起头 Linux 是我最喜欢的操作系统之一，平时用的最多的是 CentOS，Linux 的强悍不是我只言片语能描述清楚的，这篇博文将以事件记录的形式随时收集记录我平时所遇到的一些工具、命令、故障等。
网络工具包 host、nslookup、dig 等 平时经常用的几个命令 host，nslookup，dig 等，新装的 CentOS 虚拟机运行 host 命令既然报 “找不到这个命令”
sudo yum install host，并没有这个包的安装，谷歌后发现 host 命令属于网络工具包中的一个。
下面列出各个发行版对应的包安装方式：
Ubuntu:# sudo apt-get install dnsutils Debian: # apt-get install dnsutils Fedora / Centos: # yum install bind-utils tcpdump 抓包分析 Vanilla 单次请求 sudo tcpdump -i any port 9110 -X -s 0 -S
 -X表明当分析和打印时, tcpdump 会打印每个包的头部数据, 同时会以16进制和ASCII码形式打印出每个包的数据(但不包括连接层的头部)。 -S表明打印TCP 数据包的顺序号时, 使用绝对的顺序号, 而不是相对的顺序号.比如我第一次用tcpdump查看tcp的三次握手时发现第三次握手的ack=1,这个ack就是相对的，因为tcpdump只在SYN包中显示绝对顺序号，而非SYN包则显示相对的，为了便于观察，在抓包时都采用来绝对的顺序号。  http://www2.meps.tp.edu.tw/documents/memo/TCP%EF%BC%8FIP%E6%A6%82%E8%AB%96/index.htm http://xstarcd.github.io/wiki/shell/tcpdump_TCP_three-way_handshake.html http://linuxwiki.github.io/NetTools/tcpdump.html json 命令行解析工具 jq 来自 IBM 的文档 项目 官方文档</description>
    </item>
    
  </channel>
</rss>